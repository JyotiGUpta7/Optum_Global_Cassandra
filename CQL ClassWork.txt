 -- this is a comment line in CQL editor

// this is another way to write comment line in CQL editor

/* This is the way
   to write multi-line
   comment in CQL editor */

help // to get all the command list for CQL editor

clear // to clear the screen


------------- Create a Keyspace -------------
create keyspace FirstKeyspace
 with replication = {'class':'SimpleStrategy',
 'replication_factor':'1'};

describe keyspaces

desc keyspaces;

use firstkeyspace;


------------- Create a Table -------------
create table books_by_author (
 author_name text,
 publish_year int,
 book_id uuid,
 book_name text,
 rating float,
 primary key((author_name), publish_year, book_id)
 ) with clustering order by (publish_year desc, book_id asc);

-- uuid stands for "universally unique identifier"
-- it is supposed to be unique even outside of the table

describe books_by_author;
desc books_by_author;


------------- Insert Records -------------
insert into books_by_author (author_name, publish_year, book_id, book_name, rating)
 values ('James Patterson', 2009, uuid(), 'Witch & Wizard', 4);

insert into books_by_author (author_name, publish_year, book_id, book_name, rating)
 values ('James Patterson', 2008, uuid(), 'Cross', 4.5);

insert into books_by_author (author_name, publish_year, book_id, book_name, rating)
 values ('James Patterson', 2018, uuid(), 'The President is Missing', 3.5);


------------- Select Records -------------
select * from books_by_author;

// due to publish_year DESC, so records are arranged in the order 2018, 2009, 2008
// as we know that the primary key must be the part of the where clause for efficient query execution
// but specifically, the partition key must be the part of the where clause. Otherwise, it will have 
// to search all the nodes in the cluster

select * from books_by_author
 where author_name = 'James Patterson' and
 publish_year < 2009;

// in the above query the partition key author_name is in the where clause, so it will execute efficiently

select * from books_by_author
 where publish_year = 2009;

// ERROR Code: InvalidRequest: Error from server: code=2200 [Invalid query] 
// message="Cannot execute this query as it might involve data filtering and thus may have 
// unpredictable performance. If you want to execute this query despite the performance 
// unpredictability, use ALLOW FILTERING"

select * from books_by_author
 where publish_year = 2009 allow filtering;
// now it will provide us the output in a very slow and in a very inefficient way

// as clustering keys are sorted so we can use the rage queries on them
select * from books_by_author
 where author_name = 'James Patterson' and
 publish_year > 2008 and publish_year < 2018;


select * from books_by_author
 where author_name = 'James Patterson' and
 publish_year < 2009 and rating > 4;

// Error Code: InvalidRequest: Error from server: code=2200 [Invalid query] 
// message="Cannot execute this query as it might involve data filtering and 
// thus may have unpredictable performance. If you want to execute this query 
// despite the performance unpredictability, use ALLOW FILTERING"

// in the above query as rating is not the part of the clustering key, so again causing error

select * from books_by_author
 where author_name = 'James Patterson' and
 publish_year < 2009 and rating > 4
 allow filtering;

// will produce the desired answer in an inefficient way as rating is not the part of the clustering 
// key. So it will have to sort all the records in the machine again to generate the required result.

------------- CQL Datatypes (UUID) -------------

insert into books_by_author (author_name, publish_year, book_id, book_name, rating)
 values ('James Patterson', 2017, uuid(), 'Manning', 4.0);

// here we are using the convenience function uuid() against the attribute book_id
// this uuid value is 128 bit (32 hexadecimal digits) unique identification number

select * from books_by_author where author_name = 'James Patterson';
// listing all the records of the table

select * from books_by_author where author_name = 'James patterson';
// no record will be selected as the author name is not in the proper case


------------- CQL Datatypes (TimeUUID) -------------
alter table books_by_author add book_timeuuid timeuuid;

desc books_by_author;

insert into books_by_author
 (author_name, publish_year, book_id, book_timeuuid, book_name, rating)
 values ('Tony', 2017, uuid(), now(), 'Crust', 4.0);

select * from books_by_author where author_name = 'Tony';

select * from books_by_author;


------------- CQL Datatypes (Set) -------------
// The set data type stores a collection of unique elements. The elements are unordered, but cqlsh returns
// the elements in the sorted order

alter table books_by_author add email set<text>;

describe table books_by_author;

select * from books_by_author;

select author_name, publish_year, book_name, book_timeuuid, email, rating from books_by_author;

update books_by_author set email = {'james_patter@gmail.com'} where author_name = 'James Patterson'
 and publish_year = 2017
 and book_id=e56030a7-cd66-4c38-b508-27a14b23b7e8;

select author_name, publish_year, book_name, book_timeuuid, email, rating from books_by_author;

update books_by_author set email = email + {'james_patterson123@gmail.com'}
where author_name = 'James Patterson'
and publish_year = 2017
and book_id=e56030a7-cd66-4c38-b508-27a14b23b7e8;

// we can also use this '+' for the first time when email set was empty

select author_name, publish_year, book_name, book_timeuuid, email, rating from books_by_author;

// if we execute the same update query again then there will be no change the email field as it contains
// only unique values

update books_by_author set email = email - {'james_patter@gmail.com'}
where author_name = 'James Patterson'
and publish_year = 2017
and book_id=e56030a7-cd66-4c38-b508-27a14b23b7e8;
// for eliminating the existing email id from the email attribute

select author_name, publish_year, book_name, email, rating from books_by_author;

update books_by_author set email = {}
where author_name = 'James Patterson'
and publish_year = 2017
and book_id=e56030a7-cd66-4c38-b508-27a14b23b7e8;
// eliminating all the email ids from the email attribute

select author_name, publish_year, book_name, email, rating from books_by_author;

update books_by_author set email = email + {'james_patter@gmail.com'}
where author_name = 'James Patterson'
and publish_year = 2017
and book_id=e56030a7-cd66-4c38-b508-27a14b23b7e8;
// adding new email id to the void email set

select author_name, publish_year, book_name, email, rating from books_by_author;


------------- CQL Datatypes (List) -------------
// The list data type contains an ordered list of elements. By default, the values are stored 
// in order of insertion and also duplicates are possible

alter table books_by_author add
phone_numbers list<text>;

describe table books_by_author;

update books_by_author set phone_numbers = ['1-800-000-9999']
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;

select author_name, publish_year, phone_numbers from books_by_author;

update books_by_author set phone_numbers = phone_numbers + ['1-080-011-8888']
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;

select author_name, publish_year, phone_numbers from books_by_author;

update books_by_author set phone_numbers[1] = '4-555-666-9999'
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;

select author_name, publish_year, phone_numbers from books_by_author;

delete phone_numbers[1] from books_by_author
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;
// deleting by index number

select author_name, publish_year, phone_numbers from books_by_author;

update books_by_author set phone_numbers = phone_numbers + ['1-080-011-8888']
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;

select author_name, publish_year, phone_numbers from books_by_author;

update books_by_author set phone_numbers = phone_numbers - ['1-080-011-8888']
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;

select author_name, publish_year, phone_numbers from books_by_author;

update books_by_author set phone_numbers = []
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;
// making the list emppty

select author_name, publish_year, phone_numbers from books_by_author;


------------- CQL Datatypes (Map) -------------
// the map data type contains a collection of key-value pairs. Cqlsh returns the
// elements in the sorted order of key content

alter table books_by_author add family map<text, text>;

describe table books_by_author;

update books_by_author set family = {'wife':'Sanya', 'sibling':'John'}
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;

select author_name, publish_year, family from books_by_author;

update books_by_author set family = family + {'son':'Tim', 'daughter':'Jamie'}
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;

select author_name, publish_year, family from books_by_author;

update books_by_author set family = family - {'son'}
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;

select author_name, publish_year, family from books_by_author;

delete family['daughter'] from books_by_author
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;

select author_name, publish_year, family from books_by_author;

update books_by_author set family = {}
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;
// making the map empty

select author_name, publish_year, family from books_by_author;

update books_by_author set family = {'son':'Tim', 'daughter':'Jamie'}
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;

select author_name, publish_year, family from books_by_author;


------------- CQL Datatypes (Tuple) -------------
drop table emp_data;

create table emp_data (
	e_id int primary key,
	e_salary int,
	e_data tuple<int, text, int>
);

insert into emp_data (e_id, e_salary, e_data)
values (501, 15000, (1, 'OK', 200));

insert into emp_data (e_id, e_salary, e_data)
values (502, 25000, (2, 'Test', 500));

insert into emp_data (e_id, e_salary, e_data)
values (503, 35000, (3, 'Final', 400));

select * from emp_data;

select * from emp_data
where e_id = 502 and e_data = (2, 'Test', 500) allow filtering;

select * from emp_data
where e_data = (2, 'Test', 500) allow filtering;


------------- CQL Datatypes (User Defined) -------------
create type address (
	street text,
	city text,
	state text,	
	zip_code int
);

alter table books_by_author add addresses map<text, address>;
// Error Code: InvalidRequest: Error from server: code=2200 [Invalid query] 
// message="Non-frozen UDTs are not allowed inside collections: map<text, address>"

alter table books_by_author add addresses map<text, frozen<address>>;

update books_by_author set addresses = addresses +
{'home': {street:'7712 E. Broadway', city: 'Tucson', state: 'AZ', zip_code: 85715}}
where author_name = 'James Patterson' and publish_year = 2017
and book_id = e56030a7-cd66-4c38-b508-27a14b23b7e8;

select author_name, publish_year, addresses from books_by_author;


------------- Create Secondary Index -------------
select * from emp_data;

select * from emp_data where e_data =  (2, 'Test', 500);
// produces error message as e_data is not the part of primary key

select * from emp_data where e_data =  (2, 'Test', 500) allow filtering;

create index on emp_data(e_data);

select * from emp_data where e_data =  (2, 'Test', 500);


------------- Cql Inbuilt Functions -------------
select max(e_salary), min(e_salary), sum(e_salary), count(e_salary), avg(e_salary)
from emp_data;


------------- Importing Data from CSV File -------------
create table student_data (
	s_id int primary key,
	s_name text,	
	s_sub1 int,
	s_sub2 int,
	s_sub3 int,
	s_sub4 int
);

// create a csv file against name student_details.csv with the following content
Roll,Name,Sub1,Sub2,Sub3,Sub4
1,Amit,10,20,30,40
2,Amal,11,22,33,44
3,Anu,34,45,56,67

copy student_data(s_id,s_name,s_sub1,s_sub2,s_sub3,s_sub4)
from 'C:\Users\Administrator\Desktop\student_details.csv'
with header = true;

select * from student_data;

select s_id, s_name, s_sub1, s_sub2, s_sub3, s_sub4 from student_data;

truncate table student_data;

select s_id, s_name, s_sub1, s_sub2, s_sub3, s_sub4 from student_data;

copy student_data(s_id,s_name,s_sub1,s_sub2,s_sub3,s_sub4)
from 'C:\Users\Administrator\Desktop\student_details.csv'
with header = false;

select s_id, s_name, s_sub1, s_sub2, s_sub3, s_sub4 from student_data;

//exporting rows from the Cassandra table to csv file
copy student_data (s_id, s_name, s_sub1, s_sub2, s_sub3, s_sub4)
to 'C:\Users\Administrator\Desktop\student_details1.csv' with header = true;

// taking inputs from the user keyboard input
copy student_data from stdin;
// give inputs link: 111,Titas,40,50,60,70
// To terminate in the next line give '.'

drop table student_data;
drop keyspace firstkeyspace;






